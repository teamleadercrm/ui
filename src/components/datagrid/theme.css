:root {
  --datagrid-blend-width: 6px;
  --datagrid-cell-width-base: 80px;
}

.data-grid {
  display: inline-flex;
  flex-direction: row;
  min-width: 100%;
  max-width: 100%;
  position: relative;
}

.section-wrapper {
  width: 100%;
}

.section {
  display: flex;
  flex-direction: column;

  &:first-child .row .cell:first-child {
    padding-left: var(--spacer-regular);
  }

  &:last-child .row .cell:last-child {
    padding-right: var(--spacer-regular);
  }
}

.is-sticky-left .row .cell:last-child {
  padding-right: var(--spacer-regular);
}

.is-sticky-left + .section .row .cell:first-child {
  padding-left: var(--spacer-regular);
}

.row {
  display: flex;

  &:last-child {
    .cell {
      border-bottom: 0;
    }
  }
}

.cell {
  align-items: center;
  border-bottom: 1px solid var(--color-neutral);
  color: var(--color-teal-darkest);
  display: flex;
  font-size: 14px;
  flex: 1;
  font-family: var(--font-family-inter);
  font-weight: 400;
  min-height: 36px;
  padding: var(--spacer-smaller);
  position: relative;
  white-space: nowrap;
}

.header-cell {
  color: var(--color-teal-dark);
}

.has-overflow-prevention {
  overflow: hidden;
  text-overflow: ellipsis;

  > * {
    overflow: hidden;
    text-overflow: ellipsis;
  }
}

.has-pointer-cursor {
  cursor: pointer;
}

.is-bordered {
  border-bottom: 1px solid var(--color-neutral);
  border-top: 1px solid var(--color-neutral);
}

.is-sticky-left {
  max-width: 60%;
}

.is-scrollable {
  flex: 1;
  overflow-x: auto;
  overflow-y: hidden;
}

.is-sortable {
  &:hover {
    color: var(--color-teal-darkest);
    cursor: pointer;
  }
}

.is-sortable:not(.is-sorted) {
  svg {
    display: none;
  }

  &:hover svg {
    color: var(--color-neutral-dark);
    display: block;
  }
}

.is-sorted,
.is-sorted svg {
  color: var(--color-teal-darkest);
}

.loading-bar {
  background: var(--color-neutral-lightest);
  position: absolute;
  top: 48px;
  left: 0;
  right: 0;
  z-index: 3;
}

/* Cell backgrounds */
.has-background-neutral {
  background-color: var(--color-neutral-light) !important;

  .cell {
    background-color: var(--color-neutral-light);
  }
}

.has-background-white {
  background-color: var(--color-white) !important;

  .cell {
    background-color: var(--color-white);
  }
}

/* Cell blending */
.has-blend-left {
  .cell:first-child::before {
    right: 100%;
    content: '';
    position: absolute;
    top: 0;
    height: 100%;
    width: var(--datagrid-blend-width);
    z-index: 2;
  }

  &.has-border-left .cell:first-child::before {
    right: calc(100% + 1px);
  }

  .has-background-white .cell:first-child::before {
    background: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 1) 100%);
  }

  .has-background-neutral .cell:first-child::before {
    background: linear-gradient(to right, rgba(247, 247, 250, 0) 0%, rgba(247, 247, 250, 1) 100%);
  }
}

.has-blend-right {
  .cell:last-child::before {
    left: 100%;
    content: '';
    position: absolute;
    top: 0;
    height: 100%;
    width: var(--datagrid-blend-width);
    z-index: 2;
  }

  &.has-border-right .cell:last-child::before {
    left: calc(100% + 1px);
  }

  .has-background-white .cell:last-child::before {
    background: linear-gradient(to left, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 1) 100%);
  }

  .has-background-neutral .cell:last-child::before {
    background: linear-gradient(to left, rgba(247, 247, 250, 0) 0%, rgba(247, 247, 250, 1) 100%);
  }
}

/* Cell borders */
.has-border-around {
  z-index: 1;

  &::after {
    box-shadow: inset 0 0 0 1px var(--color-neutral-dark), 0 0 0 1px var(--color-neutral-dark);
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
  }
}

.has-border-left {
  border-left: 1px solid var(--color-neutral-dark);
}

.has-border-right {
  border-right: 1px solid var(--color-neutral-dark);
}

/* Cell text */
.is-soft {
  color: var(--color-neutral-darkest);
}

.is-strong {
  font-family: var(--font-family-inter);
  font-weight: 500;
}

/* Cell widths */
.flex-checkbox-width {
  flex: 0 0 18px;
  min-width: 18px;
}

.flex-min-width {
  flex: 0 0 30px;
  min-width: 30px;
}

@each $factor in (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) {
  .flex-$(factor) {
    flex: $factor 0 calc($factor * var(--datagrid-cell-width-base));
    min-width: calc($factor * var(--datagrid-cell-width-base));
  }
}

/* Cell alignment */
.align-left {
  justify-content: flex-start;
  text-align: left;
}

.align-center {
  justify-content: center;
  text-align: center;
}

.align-right {
  justify-content: flex-end;
  text-align: right;
}
