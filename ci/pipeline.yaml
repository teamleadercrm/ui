---
resource_types:
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
      tag: latest
      username: ((DOCKER_HUB_USERNAME))
      password: ((DOCKER_HUB_PASSWORD))
  - name: s3
    type: docker-image
    source:
      repository: teamleader/s3-simple-resource
      tag: latest
      username: ((DOCKER_HUB_USERNAME))
      password: ((DOCKER_HUB_PASSWORD))
  - name: cf
    type: docker-image
    source:
      repository: teamleader/cf-simple-resource
      tag: latest
      username: ((DOCKER_HUB_USERNAME))
      password: ((DOCKER_HUB_PASSWORD))
  - name: pull-request
    type: docker-image
    source:
      repository: teliaoss/github-pr-resource
      username: ((DOCKER_HUB_USERNAME))
      password: ((DOCKER_HUB_PASSWORD))
  - name: github-webhook-resource
    type: docker-image
    source:
      repository: homedepottech/github-webhook-resource
      tag: latest
      username: ((DOCKER_HUB_USERNAME))
      password: ((DOCKER_HUB_PASSWORD))

resources:
  - name: git-design-ui
    type: git
    source:
      uri: git@github.com:teamleadercrm/ui.git
      branch: master
      private_key: ((TEAMLEADER_PRIVATE_KEY))
    icon: github
  - name: git-ci-design-ui
    type: git
    source:
      uri: git@github.com:teamleadercrm/ui.git
      branch: next-release
      private_key: ((TEAMLEADER_PRIVATE_KEY))
      paths: [ci]
    icon: github
  - name: git-ci-pull-request
    type: pull-request
    webhook_token: ((TEAMLEADER_WEBHOOK_TOKEN))
    source:
      access_token: ((GITHUB_ACCESS_TOKEN))
      repository: teamleadercrm/ui
      paths: ['ci/*']
    icon: github
  - name: git-pull-request
    type: pull-request
    webhook_token: ((TEAMLEADER_WEBHOOK_TOKEN))
    source:
      access_token: ((GITHUB_ACCESS_TOKEN))
      repository: teamleadercrm/ui
    icon: github

  # Docker image
  - name: docker-node
    type: docker-image
    check_every: 24h
    source:
      repository: node
      tag: '14-slim'
    icon: docker
  - name: docker-fly-validate
    type: docker-image
    check_every: 24h
    source:
      repository: teamleader/concourse-fly
      tag: ((DOCKER_FLY_VALIDATE_TAG))
      username: ((DOCKER_HUB_USERNAME))
      password: ((DOCKER_HUB_PASSWORD))
  - name: docker-yamllint
    type: docker-image
    check_every: 24h
    source:
      repository: teamleader/yamllint
      tag: latest
      username: ((DOCKER_HUB_USERNAME))
      password: ((DOCKER_HUB_PASSWORD))

  - name: slack-alert
    type: slack-notification
    check_every: 24h
    source:
      # slack channel: dev-ci
      url: https://hooks.slack.com/services/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
    icon: slack

  - name: s3-bucket-ui
    type: s3
    check_every: 24h
    source:
      access_key_id: ((AWS_ACCESS_KEY))
      secret_access_key: ((AWS_ACCESS_SECRET))
      bucket: ((DESIGN_UI_DEPLOY_PARAMS.BUCKET))
      region: eu-west-1
    icon: amazon-drive

  - name: cloudfront-ui
    type: cf
    check_every: 24h
    source:
      access_key_id: ((AWS_ACCESS_KEY))
      secret_access_key: ((AWS_ACCESS_SECRET))
      distribution_id: ((DESIGN_UI_DEPLOY_PARAMS.DISTRIBUTION_ID))
      path: '/*'
      region: eu-west-1
    icon: amazon-drive

  - name: github-webhook
    type: github-webhook-resource
    check_every: 24h
    source:
      github_api: https://api.github.com
      github_token: ((GITHUB_ACCESS_TOKEN))

groups:
  - name: design-ui
    jobs:
      - deploy-components
      - pr-linting
      - pr-check-types
  - name: design-ui-ops
    jobs:
      - pr-yamllint
      - pr-fly-validate
      - yamllint
      - fly-validate
      - set-pipeline
      - create-repository-ci-webhook

jobs:
  - name: deploy-components
    plan:
      - in_parallel:
          - get: git-design-ui
            trigger: true
          - get: docker-node
            params: {save: true}
      - task: build-components
        image: docker-node
        config:
          platform: linux
          inputs:
            - name: git-design-ui
          outputs:
            - name: build-output
          run:
            path: sh
            args:
              - -exec
              - |
                cd git-design-ui
                yarn
                yarn deploy:prod
                cp -a dist/. ../build-output
        on_failure: ((SLACK_ON_FAILURE))
      - put: s3-bucket-ui
        params:
          dir: build-output
      - put: cloudfront-ui
    on_failure: ((SLACK_ON_FAILURE_DEPLOYMENT))
    on_success: ((SLACK_ON_SUCCESS_DEPLOYMENT))

  - name: pr-linting
    plan:
      - in_parallel:
          - get: git-pull-request
            trigger: true
            version: every
          - get: docker-node
            params: {save: true}
      - put: git-pull-request
        params:
          path: git-pull-request
          status: pending
          context: linting
      - task: linting
        image: docker-node
        config:
          platform: linux
          caches:
            - path: git-pull-request/node_modules
          inputs:
            - name: git-pull-request
          run:
            path: sh
            args:
              - -exec
              - |
                cd git-pull-request
                yarn
                yarn lint
    on_success:
      put: git-pull-request
      params:
        path: git-pull-request
        status: success
        context: linting
    on_failure:
      put: git-pull-request
      params:
        path: git-pull-request
        status: failure
        context: linting

  - name: pr-check-types
    plan:
      - in_parallel:
          - get: git-pull-request
            trigger: true
            version: every
          - get: docker-node
            params: {save: true}
      - put: git-pull-request
        params:
          path: git-pull-request
          status: pending
          context: check-types
      - task: check-types
        image: docker-node
        config:
          platform: linux
          caches:
            - path: git-pull-request/node_modules
          inputs:
            - name: git-pull-request
          run:
            path: sh
            args:
              - -exec
              - |
                cd git-pull-request
                yarn
                yarn check-types
    on_success:
      put: git-pull-request
      params:
        path: git-pull-request
        status: success
        context: check-types
    on_failure:
      put: git-pull-request
      params:
        path: git-pull-request
        status: failure
        context: check-types

  - name: pr-test
    plan:
      - in_parallel:
          - get: git-pull-request
            trigger: true
            version: every
          - get: docker-node
            params: {save: true}
      - put: git-pull-request
        params:
          path: git-pull-request
          status: pending
          context: test
      - task: test
        image: docker-node
        config:
          platform: linux
          caches:
            - path: git-pull-request/node_modules
          inputs:
            - name: git-pull-request
          run:
            path: sh
            args:
              - -exec
              - |
                cd git-pull-request
                yarn
                yarn test
    on_success:
      put: git-pull-request
      params:
        path: git-pull-request
        status: success
        context: test
    on_failure:
      put: git-pull-request
      params:
        path: git-pull-request
        status: failure
        context: test

  # OPS jobs

  - name: pr-yamllint
    plan:
      - in_parallel:
          - get: git-ci-pull-request
            trigger: true
            version: every
          - get: docker-yamllint
            params: {save: true}
      - put: git-ci-pull-request
        params:
          path: git-ci-pull-request
          status: pending
          context: yamllint
      - task: yamllint
        image: docker-yamllint
        file: git-ci-pull-request/ci/yamllint.yaml
        input_mapping:
          git-ci-design-ui: git-ci-pull-request
    on_success:
      put: git-ci-pull-request
      params:
        path: git-ci-pull-request
        status: success
        context: yamllint
    on_failure:
      put: git-ci-pull-request
      params:
        path: git-ci-pull-request
        status: failure
        context: yamllint

  - name: pr-fly-validate
    plan:
      - in_parallel:
          - get: git-ci-pull-request
            trigger: true
            version: every
          - get: docker-fly-validate
            params: {save: true}
      - put: git-ci-pull-request
        params:
          path: git-ci-pull-request
          status: pending
          context: fly-validate
      - task: fly-validate
        image: docker-fly-validate
        file: git-ci-pull-request/ci/fly-validate.yaml
        input_mapping:
          git-ci-design-ui: git-ci-pull-request
    on_success:
      put: git-ci-pull-request
      params:
        path: git-ci-pull-request
        status: success
        context: fly-validate
    on_failure:
      put: git-ci-pull-request
      params:
        path: git-ci-pull-request
        status: failure
        context: fly-validate

  - name: fly-validate
    plan:
      - in_parallel:
          - get: docker-fly-validate
            params: {save: true}
          - get: git-ci-design-ui
            trigger: true
      - task: fly-validate
        image: docker-fly-validate
        file: git-ci-design-ui/ci/fly-validate.yaml

  - name: yamllint
    plan:
      - in_parallel:
          - get: docker-yamllint
            params: {save: true}
          - get: git-ci-design-ui
            trigger: true
      - task: yamllint
        image: docker-yamllint
        file: git-ci-design-ui/ci/yamllint.yaml

  - name: set-pipeline
    plan:
      - get: git-ci-design-ui
        trigger: true
        passed: [fly-validate, yamllint]
      - set_pipeline: design-ui
        file: git-ci-design-ui/ci/pipeline.yaml
        var_files:
          - git-ci-design-ui/ci/common-vars.yaml
          - git-ci-design-ui/ci/params.yaml
    on_failure: ((SLACK_ON_FAILURE))

  - name: create-repository-ci-webhook
    plan:
      - in_parallel:
          - put: create-pr-webhook
            resource: github-webhook
            params:
              org: teamleadercrm
              repo: ui
              resource_name: git-pull-request
              webhook_token: ((TEAMLEADER_WEBHOOK_TOKEN))
              operation: create
              events: [push, pull_request]
          - put: create-ci-pr-webhook
            resource: github-webhook
            params:
              org: teamleadercrm
              repo: ui
              resource_name: git-ci-pull-request
              webhook_token: ((TEAMLEADER_WEBHOOK_TOKEN))
              operation: create
              events: [push, pull_request]
